apiVersion: v1
kind: ConfigMap
metadata:
  name: my-set-config
  namespace: dbspace
data:
  run.sh: |
    #!/bin/sh
    Sleep 10 # wait for vars to set
    SET_INDEX=${HOSTNAME##*-}
    echo "Starting initializing for pod $SET_INDEX"
    if [ "$SET_INDEX" = "0" ]; then
      cp /mnt/scripts/my-0.cnf /mnt/data/my.cnf
      cp /mnt/scripts/init-mysql-0.sql /mnt/data/b-init-mysql-cluster.sql
      cp /mnt/scripts/init-test-script.sql /mnt/data/a-init-test-script.sql
      cp /mnt/scripts/prep-work.sh /mnt/data/prep-work.sh
      touch /mnt/data/auto.cnf       
    elif [ "$SET_INDEX" = "1" ]; then
      cp /mnt/scripts/my-1.cnf /mnt/data/my.cnf
      cp /mnt/scripts/init-mysql-1.sql /mnt/data/b-init-mysql-cluster.sql
      cp /mnt/scripts/init-test-script.sql /mnt/data/a-init-test-script.sql ## init.d.db files are executed in alphabatical order. non bootstrap members boot as super read only hence need to do init writes before cluster configs.      
      cp /mnt/scripts/prep-work.sh /mnt/data/prep-work.sh
      touch /mnt/data/auto.cnf
    else
      echo "Invalid statefulset index"
      exit 1
    fi

    nc -w 2 -v mysql.dbspace.svc.cluster.local 3306 </dev/null;
    if [[ $? -ne 1 ]]
      then
        echo "####### AUTOMATED CONFIG APPEND START ###############"  >> /mnt/data/my.cnf
        echo "####### RUNNING CLUSTER DETECTED ####################"  >> /mnt/data/my.cnf
        echo "####### HENCE: OMIT BOOTSTRAP CLUSTER ###############"  >> /mnt/data/my.cnf
        echo "loose-group_replication_bootstrap_group = OFF" >> /mnt/data/my.cnf
        echo "####### AUTOMATED CONFIG APPEND END   ###############"  >> /mnt/data/my.cnf
      else
        echo "####### AUTOMATED CONFIG APPEND START ###############"  >> /mnt/data/my.cnf
        echo "####### UNABLE TO DETECT RUNNING CLUSTER ############"  >> /mnt/data/my.cnf
        echo "####### HENCE: BOOTSTRAP CLUSTER ON BOOT ############"  >> /mnt/data/my.cnf
        echo "loose-group_replication_bootstrap_group = ON" >> /mnt/data/my.cnf
        echo "####### AUTOMATED CONFIG APPEND END   ###############"  >> /mnt/data/my.cnf

        # Sleep few seconds only on first cluster boot to open 3306 port before second node starts up. otherwise second node will also bootstap cluster.
        # TODO : remove sleep and add nc lookup to check if 3306 service is up and running.
        echo "####### AUTOMATED CONFIG APPEND END   ###############"  >> /mnt/data/prep-work.sh
        echo "####### UNABLE TO DETECT RUNNING CLUSTER ############"  >> /mnt/data/prep-work.sh
        echo "####### HENCE: BOOTSTRAP CLUSTER ON BOOT ############"  >> /mnt/data/prep-work.sh
        echo "####### WAIT FOR INITIAL CLUSTER TO BOOTUP ##########"  >> /mnt/data/prep-work.sh
        echo "sleep 60"  >> /mnt/data/prep-work.sh
    fi 
  my-0.cnf: |
    # For advice on how to change settings please see
    # http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html

    # https://www.digitalocean.com/community/tutorials/how-to-configure-mysql-group-replication-on-ubuntu-16-04#choosing-single-primary-or-multi-primary
    # https://dba.stackexchange.com/questions/287649/mysql-multi-master-group-replication-on-kubernetes

    [mysqld]

    ########################## GROUP REPLICATION CONFIG START #########################################

    # General replication settings
    disabled_storage_engines="MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY"
    gtid_mode = ON
    enforce_gtid_consistency = ON
    master_info_repository = TABLE
    relay_log_info_repository = TABLE
    binlog_checksum = NONE
    log_slave_updates = ON
    log_bin = binlog
    binlog_format = ROW
    transaction_write_set_extraction = XXHASH64
    ### auto increment settings
    auto-increment-increment=3
    auto-increment-offset=1
    ### group_replication_bootstrap only need when cluster boot for the first time. Hence, this is conditional.
    ### Moved this config to append based on cluster state from init container.
    loose-group_replication_bootstrap_group = OFF
    loose-group_replication_start_on_boot = OFF
    #loose-group_replication_ssl_mode = REQUIRED
    #loose-group_replication_recovery_use_ssl = 1

    # Shared replication group configuration
    loose-group_replication_group_name = "c64b8f60-bb3f-11ed-afa1-0242ac120002"
    loose-group_replication_ip_allowlist = "mysql-0.mysql.dbspace.svc.cluster.local,mysql-1.mysql.dbspace.svc.cluster.local"
    loose-group_replication_group_seeds = "mysql-0.mysql.dbspace.svc.cluster.local:33061,mysql-1.mysql.dbspace.svc.cluster.local:33061"

    # Single or Multi-primary mode? Uncomment these two lines
    # for multi-primary mode, where any host can accept writes
    loose-group_replication_single_primary_mode = OFF
    loose-group_replication_enforce_update_everywhere_checks = ON

    # Host specific replication configuration
    server_id = 1
    bind-address = "mysql-0.mysql.dbspace.svc.cluster.local"
    report_host = "mysql-0.mysql.dbspace.svc.cluster.local"
    loose-group_replication_local_address = "mysql-0.mysql.dbspace.svc.cluster.local:33061"

    #########################  GROUP REPLICATION CONFIG END ###########################################
    #
    # Remove leading # and set to the amount of RAM for the most important data
    # cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.
    # innodb_buffer_pool_size = 128M
    #
    # Remove leading # to turn on a very important data integrity option: logging
    # changes to the binary log between backups.
    # log_bin
    #
    # Remove leading # to set options mainly useful for reporting servers.
    # The server defaults are faster for transactions and fast SELECTs.
    # Adjust sizes as needed, experiment to find the optimal values.
    # join_buffer_size = 128M
    # sort_buffer_size = 2M
    # read_rnd_buffer_size = 2M
    skip-host-cache
    skip-name-resolve
    datadir=/var/lib/mysql
    socket=/var/lib/mysql/mysql.sock
    secure-file-priv=/var/lib/mysql-files
    user=mysql

    # Disabling symbolic-links is recommended to prevent assorted security risks
    symbolic-links=0

    #log-error=/var/log/mysqld.log
    relay_log=mysql-0-relay-bin
    #group_replication_communication_debug_options="GCS_DEBUG_ALL"
    pid-file=/var/run/mysqld/mysqld.pid
  my-1.cnf: |
    # For advice on how to change settings please see
    # http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html

    # https://www.digitalocean.com/community/tutorials/how-to-configure-mysql-group-replication-on-ubuntu-16-04#choosing-single-primary-or-multi-primary
    # https://dba.stackexchange.com/questions/287649/mysql-multi-master-group-replication-on-kubernetes

    [mysqld]

    ########################## GROUP REPLICATION CONFIG START #########################################

    # General replication settings
    disabled_storage_engines="MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY"
    gtid_mode = ON
    enforce_gtid_consistency = ON
    master_info_repository = TABLE
    relay_log_info_repository = TABLE
    binlog_checksum = NONE
    log_slave_updates = ON
    log_bin = binlog
    binlog_format = ROW
    transaction_write_set_extraction = XXHASH64
    ### auto increment settings
    auto-increment-increment=3
    auto-increment-offset=2
    ### group_replication_bootstrap only need when cluster boot for the first time. Hence, this is conditional.
    ### Moved this config to append based on cluster state from init container.    
    loose-group_replication_bootstrap_group = OFF
    loose-group_replication_start_on_boot = ON
    #loose-group_replication_ssl_mode = REQUIRED
    #loose-group_replication_recovery_use_ssl = 1

    # Shared replication group configuration
    loose-group_replication_group_name = "c64b8f60-bb3f-11ed-afa1-0242ac120002"
    loose-group_replication_ip_allowlist = "mysql-0.mysql.dbspace.svc.cluster.local,mysql-1.mysql.dbspace.svc.cluster.local"
    loose-group_replication_group_seeds = "mysql-0.mysql.dbspace.svc.cluster.local:33061,mysql-1.mysql.dbspace.svc.cluster.local:33061"

    # Single or Multi-primary mode? Uncomment these two lines
    # for multi-primary mode, where any host can accept writes
    loose-group_replication_single_primary_mode = OFF
    loose-group_replication_enforce_update_everywhere_checks = ON

    # Host specific replication configuration
    server_id = 2
    bind-address = "mysql-1.mysql.dbspace.svc.cluster.local"
    report_host = "mysql-1.mysql.dbspace.svc.cluster.local"
    loose-group_replication_local_address = "mysql-1.mysql.dbspace.svc.cluster.local:33061"

    #########################  GROUP REPLICATION CONFIG END ###########################################
    #
    # Remove leading # and set to the amount of RAM for the most important data
    # cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.
    # innodb_buffer_pool_size = 128M
    #
    # Remove leading # to turn on a very important data integrity option: logging
    # changes to the binary log between backups.
    # log_bin
    #
    # Remove leading # to set options mainly useful for reporting servers.
    # The server defaults are faster for transactions and fast SELECTs.
    # Adjust sizes as needed, experiment to find the optimal values.
    # join_buffer_size = 128M
    # sort_buffer_size = 2M
    # read_rnd_buffer_size = 2M
    skip-host-cache
    skip-name-resolve
    datadir=/var/lib/mysql
    socket=/var/lib/mysql/mysql.sock
    secure-file-priv=/var/lib/mysql-files
    user=mysql

    # Disabling symbolic-links is recommended to prevent assorted security risks
    symbolic-links=0

    #log-error=/var/log/mysqld.log
    relay_log=mysql-1-relay-bin
    #group_replication_communication_debug_options="GCS_DEBUG_ALL"    
    pid-file=/var/run/mysqld/mysqld.pid
  prep-work.sh: |
    #!/bin/sh    
    ###### IMPORTANT REMOVE BELOW LINES BEFORE PROD DEPLOYMENTS. ####
    ##This is just to make sure init-mysql.sql are executed each time while test clustering stuff ###########    
    #rm -rf var/lib/mysql/auto.cnf
    #rm -rf /var/lib/mysql/
  init-mysql-0.sql: |
    ######################### GR CLUSTER CONFIGS START ####################
    SET SQL_LOG_BIN=0;
    #CREATE USER 'repl'@'%' IDENTIFIED BY 'repl' REQUIRE SSL;
    CREATE USER 'repl'@'%' IDENTIFIED BY 'repl';
    GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';
    FLUSH PRIVILEGES;
    SET SQL_LOG_BIN=1;
    CHANGE MASTER TO MASTER_USER='repl', MASTER_PASSWORD='repl' FOR CHANNEL 'group_replication_recovery';
    INSTALL PLUGIN group_replication SONAME 'group_replication.so';

    ###### FOLLOWING CONFIGS ARE NOT WORKING WHILE ON BOOT. NEED TO BOOTSTRAP FROM MY.CNF CONFIG ON BOOT.
    ###### loose-group_replication_bootstrap_group = ON
    ###### loose-group_replication_start_on_boot = ON
    ###### KEEPING ABOVE CONFIGS ON MY.CNF ALSO NOT A SOLUTION FOR AD-HOC JOINS/LEAVES OF MEMBER NODES. NEED TO BRAINSTORM ANOTHER WAY!!
    #SET GLOBAL group_replication_bootstrap_group=ON;
    #START GROUP_REPLICATION;
    #SET GLOBAL group_replication_bootstrap_group=OFF;

    ######################### GR CLUSTER CONFIGS END ######################
  init-mysql-1.sql: |
    SET SQL_LOG_BIN=0;
    #CREATE USER 'repl'@'%' IDENTIFIED BY 'repl' REQUIRE SSL;
    CREATE USER 'repl'@'%' IDENTIFIED BY 'repl';
    GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';
    FLUSH PRIVILEGES;
    SET SQL_LOG_BIN=1;
    CHANGE MASTER TO MASTER_USER='repl', MASTER_PASSWORD='repl' FOR CHANNEL 'group_replication_recovery';
    INSTALL PLUGIN group_replication SONAME 'group_replication.so';

    ###### FOLLOWING CONFIGS ARE NOT WORKING. NEED TO ENABLE ON BOOT WITH MY.CNF
    ###### loose-group_replication_bootstrap_group = OFF
    ###### loose-group_replication_start_on_boot = ON
    ###### KEEPING ABOVE CONFIGS ON MY.CNF ALSO NOT A SOLUTION FOR AD-HOC JOINS/LEAVES OF MEMBER NODES. NEED TO BRAINSTORM ANOTHER WAY!!    
    #START GROUP_REPLICATION;
  init-test-script.sql: |
    ########################## TEST SCRIPT START ##########################
    CREATE DATABASE IF NOT EXISTS myDB;
    USE myDB;
    CREATE TABLE IF NOT EXISTS test (ID int NOT NULL AUTO_INCREMENT, UTS varchar(255),increment varchar(255), PRIMARY KEY (ID)) ENGINE=InnoDB;;

    CREATE USER IF NOT EXISTS 'testuser'@'localhost' IDENTIFIED BY 'testuser@123';
    CREATE USER IF NOT EXISTS 'testuser'@'%' IDENTIFIED BY 'testuser@123';
    GRANT ALL ON *.* TO 'testuser'@'localhost';
    GRANT ALL ON *.* TO 'testuser'@'%';
    flush privileges;
    ########################## TEST SCRIPT START END ######################    
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: dbspace
  labels:
    name: mysql
spec:
  serviceName: mysql
  replicas: 2
  selector:
    matchLabels:
      name: mysql
  template:
    metadata:
      namespace: dbspace
      labels:
        name: mysql
    spec:
      containers:
      - name: mysql
        image: mysql/mysql-server:8.0
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "root"
        - name: MYSQL_USER
          value: "testuser"
        - name: MYSQL_PASSWORD
          value: "testuser@123"                         
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", "/mnt/data/prep-work.sh"]        
        imagePullPolicy: Always        
        volumeMounts:
        - name: conf-vol
          mountPath: /etc/my.cnf
          subPath: my.cnf
        - name: conf-vol
          mountPath: /mnt/data
        - name: conf-vol
          mountPath: /docker-entrypoint-initdb.d/b-init-mysql-cluster.sql
          subPath: b-init-mysql-cluster.sql
        - name: conf-vol
          mountPath: /docker-entrypoint-initdb.d/a-init-test-script.sql
          subPath: a-init-test-script.sql
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "512Mi"
            cpu: "500m"  
      initContainers:
      - name: init-set
        image: alpine:latest
        command:
        - /mnt/scripts/run.sh
        volumeMounts:
        - name: scripts-vol
          mountPath: /mnt/scripts
        - name: conf-vol
          mountPath: /mnt/data
      volumes:
      - name: scripts-vol
        configMap:
          name: my-set-config
          defaultMode: 0555
      - name: conf-vol
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: dbspace
  labels:
    name: mysql
spec:
  ports:
  - name: mysql
    port: 3306
  - name: gr-port
    port: 33061  
  selector:
    name: mysql            